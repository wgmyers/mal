# .rubocop.yml, created with the aid of .rubocop_todo.yml
# See https://docs.rubocop.org/rubocop/1.14/configuration.html
# Specifically, "If you have a code base with an overwhelming amount of offenses,
# it can be a good idea to use rubocop --auto-gen-config"
# That's me!

# We can either have this cop complain, or the other one enforcing a blank
# line after an error clause, and I prefer that one. Only in core.rb though.
Layout/EmptyLinesAroundBlockBody:
  Exclude:
    - core.rb

# We are using 'table' style
Layout/HashAlignment:
  EnforcedHashRocketStyle: table

# I don't really understand AbcSize. Default value is 17. Upping that to 50
# means we only get complaints about EVAL and quasiquote. Yes, those are
# both fairly complex. Rubocop docs point us here: http://wiki.c2.com/?AbcMetric
# but I've read it several times and am none the wiser.
Metrics/AbcSize:
  Max: 50
  IgnoredMethods:
    - EVAL
    - quasiquote

# This one claims to but doesn't seem to respect IgnoredMethods, hence Max 150,
# as EVAL is very long, for Reasons, ie TCO.
Metrics/BlockLength:
  Max: 150
  IgnoredMethods:
    - EVAL

# Default is 3
# But expand_macros goes up to 6
Metrics/BlockNesting:
  Max: 6

# Not sure I fully understand this either.
# Default value is 7 - upping this to 15 means rubocop only complains about the
# other methods that Metrics/* complains about, so let's go with that.
Metrics/CyclomaticComplexity:
  Max: 15
  IgnoredMethods:
    - EVAL
    - quasiquote
    - expand_macros

# So this is an odd one. I know EVAL is long and did think about breaking it up,
# but that would (I think) be likely to break TCO as the whole point is to fall
# through a massive loop, so makes sense to ignore here.
# expand_macros, also, is only a little over the (arbitrary) 50 line rule here,
# but does not look easy to break up either without making an already convoluted
# part of the code even more convoluted.
Metrics/MethodLength:
  #Max: 145
  Max: 50
  IgnoredMethods:
    - EVAL
    - expand_macros

# Default is 100
# Seems just as arbitrary as 300
# MalCore is 245 lines long
Metrics/ModuleLength:
  Max: 300

# As with the other Metrics/* cops, upping max to 15 means we get the same set
# of yes-I-know-these-are-complex methods we can specifically ignore.
Metrics/PerceivedComplexity:
  Max: 15
  IgnoredMethods:
    - EVAL
    - quasiquote

# Excluding the step* files because READ, PRINT, EVAL are specific to this project
Naming/MethodName:
  EnforcedStyle: snake_case
  Exclude:
    - step*.rb

# You can't implement eval without using eval. (Can you?)
Security/Eval:
  Exclude:
    - 'core.rb'

# Enforce a consistent style for block delimiters.
# Style: semantic with allow oneliners flag enforces do .. end over { ... }
# except if it's a oneliner. That's closest to what I've already done.
Style/BlockDelimiters:
  EnforcedStyle: semantic
  AllowBracesOnProceduralOneLiners: true

# Exclusions here avoid a lot of redundant comments like
# 'MalAtom implements the MalAtom type'
Style/Documentation:
  Exclude:
    - 'errors.rb'
    - 'types.rb'

# Choosing lambda style means we must say 'lambda' each time.
# That's fine, it's what we did.
Style/Lambda:
  EnforcedStyle: lambda

# Keeping this because readability. Might rethink?
Style/RedundantReturn:
  Enabled: false

# Choosing 'implicit' enforced style, so we don't need to say 'StandardError' all the time
Style/RescueStandardError:
  EnforcedStyle: implicit

# We use $0 in reader.rb's tiny test suite, and this is fine.
Style/SpecialGlobalVars:
  EnforcedStyle: use_perl_names

# Offense count: 2
# Cop supports --auto-correct.
# Configuration parameters: AllowMethodsWithArguments, IgnoredMethods.
# IgnoredMethods: respond_to, define_method
Style/SymbolProc:
  Exclude:
    - 'step2_eval.rb'
    - 'step3_env.rb'
